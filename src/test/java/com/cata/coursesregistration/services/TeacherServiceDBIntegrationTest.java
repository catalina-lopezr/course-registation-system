package com.cata.coursesregistration.services;

import com.cata.coursesregistration.domain.Teacher;
import com.cata.coursesregistration.repositories.TeacherRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.TestPropertySource;

import java.util.Optional;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

@DataJpaTest
@TestPropertySource(
  locations = "classpath:application-integrationtest.properties")
public class TeacherServiceDBIntegrationTest {
    @Autowired
    private TeacherRepository teacherRepository;

    @Autowired
    private TestEntityManager entityManager;

    private Teacher teacherToTestDeletion;

    @BeforeEach
    public void setupData() {
        // id is autogenerated in persist operation, that's why no id is in this builder
        teacherToTestDeletion = Teacher.builder()
          .firstName("Jhon")
          .lastName("Smith")
          .build();
        entityManager.persistAndFlush(teacherToTestDeletion);

    }

    @Test
    public void deleteTeacher() {
        // given teacher exist
        Optional<Teacher> toDeleteTeacher = teacherRepository.findById(teacherToTestDeletion.getId());

        assertTrue(toDeleteTeacher.isPresent());
        assertEquals(teacherRepository.findAll().size(), 1);

        // when teacher is deleted
        teacherRepository.delete(toDeleteTeacher.get());

        // then the teacher should not exist
        Optional<Teacher> alreadyDeletedTeacher = teacherRepository.findById(teacherToTestDeletion.getId());
        assertFalse(alreadyDeletedTeacher.isPresent());
        assertEquals(teacherRepository.findAll().size(), 0);

    }

//    @Sql("/insertData.sql")
//    @Test
//    public void getAllTeachers() {
//        Iterable<Teacher> teachersIterable = teacherRepository.findAll();
//        List<Teacher> teachers = new ArrayList<>();
//        for (Teacher teacher : teachersIterable){
//            teachers.add(teacher);
//        }
//        assertEquals(6, teachers.size());
//    }
//
//    @Test
//    public void saveNewTeacher() {
//        TeacherDto teacherDto = new TeacherDto("Federico", "Perez");
//        teacherService.saveNew(teacherDto);
//        Teacher teacher = teacherRepository.findByFirstName("Federico");
//        assertEquals("Federico", teacher.getFirstName());
//    }
//
//    @Test
//    public void updateTeacher() {
//        TeacherDto teacherDto = new TeacherDto("Federico", "Perez");
//        teacherService.update(teacherDto, 19L);
//        Teacher teacher = teacherRepository.findByFirstName("Federico");
//        assertEquals("Federico", teacher.getFirstName());
//    }
//
//    @AfterEach
//    public void setupAfterTransaction(){
//        jdbc.execute("DELETE FROM teacher");
//    }
}
